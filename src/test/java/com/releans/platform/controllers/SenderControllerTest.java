/*
 * ReleansAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.releans.platform.controllers;

import static org.junit.Assert.*;

import java.io.*;
import java.util.*;

import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

import com.releans.platform.models.*;
import com.releans.platform.exceptions.*;
import com.releans.platform.APIHelper;
import com.releans.platform.Configuration;
import com.releans.platform.testing.TestHelper;
import com.releans.platform.controllers.SenderController;

import com.fasterxml.jackson.core.type.TypeReference;

public class SenderControllerTest extends ControllerTestBase {
    
    /**
     * Controller instance (for all tests)
     */
    private static SenderController controller;
    
    /**
     * Setup test class
     */
    @BeforeClass
    public static void setUpClass() {
        controller = getClient().getSender();
    }

    /**
     * Tear down test class
     * @throws IOException
     */
    @AfterClass
    public static void tearDownClass() throws IOException {
        controller = null;
    }

    /**
     * Return the details of the sender name.
     * @throws Throwable
     */
    @Test
    public void testSenderNameDetails() throws Throwable {
        // Parameters for the API call
        String id = "sender-id";
        String accept = "*/*";

        // Set callback and perform API call
        DynamicResponse result = null;
        controller.setHttpCallBack(httpResponse);
        try {
            result = controller.getSenderNameDetails(id, accept);
        } catch(APIException e) {};

       // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

    }

    /**
     * Create a new sender id to send messages using it
     * @throws Throwable
     */
    @Test
    public void testCreateSenderName() throws Throwable {
        // Parameters for the API call
        String accept = "text/plain";
        String contentType = "text/plain";
        String body = "Your sender name";

        // Set callback and perform API call
        Response200 result = null;
        controller.setHttpCallBack(httpResponse);
        try {
            result = controller.createSenderName(accept, contentType, body);
        } catch(APIException e) {};

       // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", TestHelper.nullString);
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertEquals("Response body does not match exactly",
                "{\"id\":\"ABCDEF\"}", 
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()));
    }

    /**
     * List all senders names associated with the account
     * @throws Throwable
     */
    @Test
    public void testGetAllSenders() throws Throwable {
        // Parameters for the API call
        String accept = "*/*";

        // Set callback and perform API call
        List<Response2001> result = null;
        controller.setHttpCallBack(httpResponse);
        try {
            result = controller.getAllSenders(accept);
        } catch(APIException e) {};

       // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertEquals("Response body does not match exactly",
                "[{\"id\":\"xEYgLPQZOpnel5aKBzyVXvAWJ\",\"senderName\":\"RELEANS\",\"phoneNumber\":\"+15105607102\",\"status\":1}]", 
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()));
    }

}
